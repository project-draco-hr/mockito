{
  Result result=JUnitCore.runClasses(ConfiguringDefaultReturnValuesUsingBaseClassTest.class,ConfiguringDefaultReturnValuesUsingRunnerTest.class,ConfiguringSelectedMocksToReturnFakesTest.class,EqualsTest.class,ListUtilTest.class,MockingProgressImplTest.class,MockitoVerificationModeTest.class,MockHandlerTest.class,AllInvocationsFinderTest.class,DefaultReturnValuesTest.class,NumberOfInvocationsCheckerTest.class,VerifyingRecorderTest.class,MissingInvocationCheckerTest.class,NoMoreInvocationsVerifierTest.class,NumberOfInvocationsInOrderCheckerTest.class,MissingInvocationInOrderCheckerTest.class,ClassImposterizerTest.class,CglibTest.class,InvocationMatcherTest.class,InvocationsFinderTest.class,InvocationTest.class,MockitoTest.class,MockUtilTest.class,ReporterTest.class,MockitoAssertionErrorTest.class,StackTraceRemoverTest.class,MockitoExceptionTest.class,StackTraceFilteringTest.class,BridgeMethodPuzzleTest.class,OverloadingPuzzleTest.class,InvalidUsageTest.class,UsingVarargsTest.class,CustomMatchersTest.class,ComparableMatchersTest.class,InvalidUseOfMatchersTest.class,MatchersTest.class,MatchersToStringTest.class,VerificationAndStubbingUsingMatchersTest.class,BasicStubbingTest.class,ReturningDefaultValuesTest.class,StubbingWithThrowablesTest.class,AtMostXVerificationTest.class,BasicVerificationTest.class,ExactNumberOfTimesVerificationTest.class,VerificationInOrderTest.class,NoMoreInteractionsVerificationTest.class,SelectedMocksInOrderVerificationTest.class,VerificationOnMultipleMocksUsingMatchersTest.class,VerificationUsingMatchersTest.class,RelaxedVerificationInOrderTest.class,DescriptiveMessagesWhenVerificationFailsTest.class,DescriptiveMessagesWhenTimesXVerificationFailsTest.class,BasicVerificationInOrderTest.class,VerificationInOrderMixedWithOrdiraryVerificationTest.class,DescriptiveMessagesOnVerificationInOrderErrorsTest.class,InvalidStateDetectionTest.class,ReplacingObjectMethodsTest.class,StackTrackeChangingTest.class,ExampleTest.class,PointingStackTraceToActualInvocationTest.class,PointingStackTraceToActualInvocationChunkTest.class);
  if (!result.wasSuccessful()) {
    System.err.println("Thread[" + Thread.currentThread().getId() + "]: error!");
    List<Failure> failures=result.getFailures();
    System.err.println(failures.size());
    for (    Failure failure : failures) {
      System.err.println(failure.getTrace());
      failed=true;
    }
  }
}
