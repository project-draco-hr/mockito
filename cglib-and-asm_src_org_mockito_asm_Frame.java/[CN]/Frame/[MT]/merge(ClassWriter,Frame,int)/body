{
  boolean changed=false;
  int i, s, dim, kind, t;
  int nLocal=inputLocals.length;
  int nStack=inputStack.length;
  if (frame.inputLocals == null) {
    frame.inputLocals=new int[nLocal];
    changed=true;
  }
  for (i=0; i < nLocal; ++i) {
    if (outputLocals != null && i < outputLocals.length) {
      s=outputLocals[i];
      if (s == 0) {
        t=inputLocals[i];
      }
 else {
        dim=s & DIM;
        kind=s & KIND;
        if (kind == LOCAL) {
          t=dim + inputLocals[s & VALUE];
        }
 else         if (kind == STACK) {
          t=dim + inputStack[nStack - (s & VALUE)];
        }
 else {
          t=s;
        }
      }
    }
 else {
      t=inputLocals[i];
    }
    if (initializations != null) {
      t=init(cw,t);
    }
    changed|=merge(cw,t,frame.inputLocals,i);
  }
  if (edge > 0) {
    for (i=0; i < nLocal; ++i) {
      t=inputLocals[i];
      changed|=merge(cw,t,frame.inputLocals,i);
    }
    if (frame.inputStack == null) {
      frame.inputStack=new int[1];
      changed=true;
    }
    changed|=merge(cw,edge,frame.inputStack,0);
    return changed;
  }
  int nInputStack=inputStack.length + owner.inputStackTop;
  if (frame.inputStack == null) {
    frame.inputStack=new int[nInputStack + outputStackTop];
    changed=true;
  }
  for (i=0; i < nInputStack; ++i) {
    t=inputStack[i];
    if (initializations != null) {
      t=init(cw,t);
    }
    changed|=merge(cw,t,frame.inputStack,i);
  }
  for (i=0; i < outputStackTop; ++i) {
    s=outputStack[i];
    dim=s & DIM;
    kind=s & KIND;
    if (kind == LOCAL) {
      t=dim + inputLocals[s & VALUE];
    }
 else     if (kind == STACK) {
      t=dim + inputStack[nStack - (s & VALUE)];
    }
 else {
      t=s;
    }
    if (initializations != null) {
      t=init(cw,t);
    }
    changed|=merge(cw,t,frame.inputStack,nInputStack + i);
  }
  return changed;
}
