{
  super(v);
  Type base=Type.getType(type);
  begin_class(Constants.V1_2,Constants.ACC_PUBLIC,className,FAST_CLASS,null,Constants.SOURCE_FILE);
  CodeEmitter e=begin_method(Constants.ACC_PUBLIC,CSTRUCT_CLASS,null);
  e.load_this();
  e.load_args();
  e.super_invoke_constructor(CSTRUCT_CLASS);
  e.return_value();
  e.end_method();
  VisibilityPredicate vp=new VisibilityPredicate(type,false);
  List methods=ReflectUtils.addAllMethods(type,new ArrayList());
  CollectionUtils.filter(methods,vp);
  CollectionUtils.filter(methods,new DuplicatesPredicate());
  List constructors=new ArrayList(Arrays.asList(type.getDeclaredConstructors()));
  CollectionUtils.filter(constructors,vp);
  emitIndexBySignature(methods);
  emitIndexByClassArray(methods);
  e=begin_method(Constants.ACC_PUBLIC,CONSTRUCTOR_GET_INDEX,null);
  e.load_args();
  List info=CollectionUtils.transform(constructors,MethodInfoTransformer.getInstance());
  EmitUtils.constructor_switch(e,info,new GetIndexCallback(e,info));
  e.end_method();
  e=begin_method(Constants.ACC_PUBLIC,INVOKE,INVOCATION_TARGET_EXCEPTION_ARRAY);
  e.load_arg(1);
  e.checkcast(base);
  e.load_arg(0);
  invokeSwitchHelper(e,methods,2,base);
  e.end_method();
  e=begin_method(Constants.ACC_PUBLIC,NEW_INSTANCE,INVOCATION_TARGET_EXCEPTION_ARRAY);
  e.new_instance(base);
  e.dup();
  e.load_arg(0);
  invokeSwitchHelper(e,constructors,1,base);
  e.end_method();
  e=begin_method(Constants.ACC_PUBLIC,GET_MAX_INDEX,null);
  e.push(methods.size() - 1);
  e.return_value();
  e.end_method();
  end_class();
}
