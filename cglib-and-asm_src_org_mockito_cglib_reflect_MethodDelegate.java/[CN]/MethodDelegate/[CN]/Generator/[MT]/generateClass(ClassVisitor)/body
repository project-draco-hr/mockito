{
  Method proxy=ReflectUtils.findInterfaceMethod(iface);
  final Method method=targetClass.getMethod(methodName,proxy.getParameterTypes());
  if (!proxy.getReturnType().isAssignableFrom(method.getReturnType())) {
    throw new IllegalArgumentException("incompatible return types");
  }
  MethodInfo methodInfo=ReflectUtils.getMethodInfo(method);
  boolean isStatic=TypeUtils.isStatic(methodInfo.getModifiers());
  if ((target == null) ^ isStatic) {
    throw new IllegalArgumentException("Static method " + (isStatic ? "not " : "") + "expected");
  }
  ClassEmitter ce=new ClassEmitter(v);
  CodeEmitter e;
  ce.begin_class(Constants.V1_2,Constants.ACC_PUBLIC,getClassName(),METHOD_DELEGATE,new Type[]{Type.getType(iface)},Constants.SOURCE_FILE);
  ce.declare_field(Constants.PRIVATE_FINAL_STATIC,"eqMethod",Constants.TYPE_STRING,null);
  EmitUtils.null_constructor(ce);
  MethodInfo proxied=ReflectUtils.getMethodInfo(iface.getDeclaredMethods()[0]);
  e=EmitUtils.begin_method(ce,proxied,Constants.ACC_PUBLIC);
  e.load_this();
  e.super_getfield("target",Constants.TYPE_OBJECT);
  e.checkcast(methodInfo.getClassInfo().getType());
  e.load_args();
  e.invoke(methodInfo);
  e.return_value();
  e.end_method();
  e=ce.begin_method(Constants.ACC_PUBLIC,NEW_INSTANCE,null);
  e.new_instance_this();
  e.dup();
  e.dup2();
  e.invoke_constructor_this();
  e.getfield("eqMethod");
  e.super_putfield("eqMethod",Constants.TYPE_STRING);
  e.load_arg(0);
  e.super_putfield("target",Constants.TYPE_OBJECT);
  e.return_value();
  e.end_method();
  e=ce.begin_static();
  e.push(methodInfo.getSignature().toString());
  e.putfield("eqMethod");
  e.return_value();
  e.end_method();
  ce.end_class();
}
