{
  validateType(classToMock);
  MockName mockName=new MockName(settings.getMockName(),classToMock);
  MockHandler<T> mockHandler=new MockHandler<T>(mockName,progress,new MatchersBinder(),settings.getReturnValues());
  MethodInterceptorFilter<MockHandler<T>> filter=new MethodInterceptorFilter<MockHandler<T>>(classToMock,mockHandler);
  Class<?>[] ancillaryTypes=settings.getExtraInterfaces();
  Class<?>[] interfaces=ancillaryTypes == null ? new Class<?>[0] : ancillaryTypes;
  Object optionalInstance=settings.getSpiedInstance();
  T mock=ClassImposterizer.INSTANCE.imposterise(filter,classToMock,interfaces);
  if (optionalInstance != null) {
    new LenientCopyTool().copyToMock(optionalInstance,mock);
  }
  filter.setInstance(optionalInstance != null ? optionalInstance : mock);
  return mock;
}
