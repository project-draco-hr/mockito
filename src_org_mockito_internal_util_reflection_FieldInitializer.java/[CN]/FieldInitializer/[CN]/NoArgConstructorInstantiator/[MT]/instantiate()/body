{
  final AccessibilityChanger changer=new AccessibilityChanger();
  Constructor<?> constructor=null;
  try {
    constructor=field.getType().getDeclaredConstructor();
    changer.enableAccess(constructor);
    final Object[] noArg=new Object[0];
    Object newFieldInstance=constructor.newInstance(noArg);
    new FieldSetter(testClass,field).set(newFieldInstance);
    return field.get(testClass);
  }
 catch (  NoSuchMethodException e) {
    throw new MockitoException("the type '" + field.getType().getSimpleName() + "' has no default constructor",e);
  }
catch (  InvocationTargetException e) {
    throw new MockitoException("the default constructor of type '" + field.getType().getSimpleName() + "' has raised an exception (see the stack trace for cause): "+ e.getTargetException().toString(),e);
  }
catch (  InstantiationException e) {
    throw new MockitoException("InstantiationException (see the stack trace for cause): " + e.toString(),e);
  }
catch (  IllegalAccessException e) {
    throw new MockitoException("IllegalAccessException (see the stack trace for cause): " + e.toString(),e);
  }
 finally {
    if (constructor != null) {
      changer.safelyDisableAccess(constructor);
    }
  }
}
