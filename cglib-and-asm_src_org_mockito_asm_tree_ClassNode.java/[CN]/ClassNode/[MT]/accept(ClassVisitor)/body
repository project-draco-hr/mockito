{
  String[] interfaces=new String[this.interfaces.size()];
  this.interfaces.toArray(interfaces);
  cv.visit(version,access,name,signature,superName,interfaces);
  if (sourceFile != null || sourceDebug != null) {
    cv.visitSource(sourceFile,sourceDebug);
  }
  if (outerClass != null) {
    cv.visitOuterClass(outerClass,outerMethod,outerMethodDesc);
  }
  int i, n;
  n=visibleAnnotations == null ? 0 : visibleAnnotations.size();
  for (i=0; i < n; ++i) {
    AnnotationNode an=(AnnotationNode)visibleAnnotations.get(i);
    an.accept(cv.visitAnnotation(an.desc,true));
  }
  n=invisibleAnnotations == null ? 0 : invisibleAnnotations.size();
  for (i=0; i < n; ++i) {
    AnnotationNode an=(AnnotationNode)invisibleAnnotations.get(i);
    an.accept(cv.visitAnnotation(an.desc,false));
  }
  n=attrs == null ? 0 : attrs.size();
  for (i=0; i < n; ++i) {
    cv.visitAttribute((Attribute)attrs.get(i));
  }
  for (i=0; i < innerClasses.size(); ++i) {
    ((InnerClassNode)innerClasses.get(i)).accept(cv);
  }
  for (i=0; i < fields.size(); ++i) {
    ((FieldNode)fields.get(i)).accept(cv);
  }
  for (i=0; i < methods.size(); ++i) {
    ((MethodNode)methods.get(i)).accept(cv);
  }
  cv.visitEnd();
}
