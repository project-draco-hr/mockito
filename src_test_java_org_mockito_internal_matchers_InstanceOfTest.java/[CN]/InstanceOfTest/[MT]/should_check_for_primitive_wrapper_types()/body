{
  assertThat(new InstanceOf(int.class).matches(1000)).isTrue();
  assertThat(new InstanceOf(Integer.class).matches(1000)).isTrue();
  assertThat(new InstanceOf(int.class).matches(new Integer(1000))).isTrue();
  assertThat(new InstanceOf(Integer.class).matches(new Integer(1000))).isTrue();
  assertThat(new InstanceOf(double.class).matches(1000.1)).isTrue();
  assertThat(new InstanceOf(Double.class).matches(1000.1)).isTrue();
  assertThat(new InstanceOf(double.class).matches(new Double(1000.1))).isTrue();
  assertThat(new InstanceOf(Double.class).matches(new Double(1000.1))).isTrue();
  assertThat(new InstanceOf(int.class).matches(1000L)).isFalse();
  assertThat(new InstanceOf(Integer.class).matches(1000L)).isFalse();
  assertThat(new InstanceOf(int.class).matches(new Long(1000))).isFalse();
  assertThat(new InstanceOf(Integer.class).matches(new Long(1000))).isFalse();
  assertThat(new InstanceOf(long.class).matches(1000L)).isTrue();
  assertThat(new InstanceOf(Long.class).matches(1000L)).isTrue();
  assertThat(new InstanceOf(long.class).matches(new Long(1000))).isTrue();
  assertThat(new InstanceOf(Long.class).matches(new Long(1000))).isTrue();
  assertThat(new InstanceOf(long.class).matches(1000)).isFalse();
  assertThat(new InstanceOf(Long.class).matches(1000)).isFalse();
  assertThat(new InstanceOf(long.class).matches(new Integer(1000))).isFalse();
  assertThat(new InstanceOf(Long.class).matches(new Integer(1000))).isFalse();
}
