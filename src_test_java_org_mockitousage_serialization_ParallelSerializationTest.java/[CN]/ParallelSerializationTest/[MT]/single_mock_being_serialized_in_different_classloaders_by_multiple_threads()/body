{
  int iterations=2;
  int threadingFactor=200;
  final ExecutorService executorService=Executors.newFixedThreadPool(threadingFactor);
  final IMethods iMethods_that_store_invocations=mock(IMethods.class,withSettings().serializable());
  for (int i=0; i <= iterations; i++) {
    List<Future<?>> futures=new ArrayList<Future<?>>(threadingFactor);
    final CyclicBarrier barrier_that_will_wait_until_threads_are_ready=new CyclicBarrier(threadingFactor);
    for (int j=0; j < threadingFactor; j++) {
      futures.add(executorService.submit(new Callable<Object>(){
        public Object call() throws Exception {
          barrier_that_will_wait_until_threads_are_ready.await();
          randomCallOn(iMethods_that_store_invocations);
          return SimpleSerializationUtil.serializeMock(iMethods_that_store_invocations).toByteArray();
        }
      }
));
      executorService.submit(new Callable<Object>(){
        public Object call() throws Exception {
          barrier_that_will_wait_until_threads_are_ready.await();
          return iMethods_that_store_invocations.longObjectReturningMethod();
        }
      }
);
    }
    for (    Future<?> future : futures) {
      future.get();
    }
  }
}
