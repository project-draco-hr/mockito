{
  Type targetType=Type.getType(target);
  ClassEmitter ce=new ClassEmitter(v);
  ce.begin_class(Constants.V1_2,Constants.ACC_PUBLIC,getClassName(),targetType,null,Constants.SOURCE_FILE);
  ce.declare_field(Constants.ACC_FINAL | Constants.ACC_PRIVATE,FIELD_NAME,targetType,null);
  CodeEmitter e=ce.begin_method(Constants.ACC_PUBLIC,CSTRUCT_OBJECT,null);
  e.load_this();
  e.super_invoke_constructor();
  e.load_this();
  e.load_arg(0);
  e.checkcast(targetType);
  e.putfield(FIELD_NAME);
  e.return_value();
  e.end_method();
  PropertyDescriptor[] descriptors=ReflectUtils.getBeanProperties(target);
  Method[] getters=ReflectUtils.getPropertyMethods(descriptors,true,false);
  Method[] setters=ReflectUtils.getPropertyMethods(descriptors,false,true);
  for (int i=0; i < getters.length; i++) {
    MethodInfo getter=ReflectUtils.getMethodInfo(getters[i]);
    e=EmitUtils.begin_method(ce,getter,Constants.ACC_PUBLIC);
    e.load_this();
    e.getfield(FIELD_NAME);
    e.invoke(getter);
    e.return_value();
    e.end_method();
  }
  for (int i=0; i < setters.length; i++) {
    MethodInfo setter=ReflectUtils.getMethodInfo(setters[i]);
    e=EmitUtils.begin_method(ce,setter,Constants.ACC_PUBLIC);
    e.throw_exception(ILLEGAL_STATE_EXCEPTION,"Bean is immutable");
    e.end_method();
  }
  ce.end_class();
}
