{
  if (currentBlock != null) {
    if (compute == FRAMES) {
      currentBlock.frame.execute(opcode,var,null,null);
    }
 else {
      if (opcode == Opcodes.RET) {
        currentBlock.status|=Label.RET;
        currentBlock.inputStackTop=stackSize;
        noSuccessor();
      }
 else {
        int size=stackSize + Frame.SIZE[opcode];
        if (size > maxStackSize) {
          maxStackSize=size;
        }
        stackSize=size;
      }
    }
  }
  if (compute != NOTHING) {
    int n;
    if (opcode == Opcodes.LLOAD || opcode == Opcodes.DLOAD || opcode == Opcodes.LSTORE || opcode == Opcodes.DSTORE) {
      n=var + 2;
    }
 else {
      n=var + 1;
    }
    if (n > maxLocals) {
      maxLocals=n;
    }
  }
  if (var < 4 && opcode != Opcodes.RET) {
    int opt;
    if (opcode < Opcodes.ISTORE) {
      opt=26 + ((opcode - Opcodes.ILOAD) << 2) + var;
    }
 else {
      opt=59 + ((opcode - Opcodes.ISTORE) << 2) + var;
    }
    code.putByte(opt);
  }
 else   if (var >= 256) {
    code.putByte(196).put12(opcode,var);
  }
 else {
    code.put11(opcode,var);
  }
  if (opcode >= Opcodes.ISTORE && compute == FRAMES && handlerCount > 0) {
    visitLabel(new Label());
  }
}
