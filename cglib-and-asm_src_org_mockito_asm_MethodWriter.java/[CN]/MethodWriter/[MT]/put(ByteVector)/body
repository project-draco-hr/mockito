{
  out.putShort(access).putShort(name).putShort(desc);
  if (classReaderOffset != 0) {
    out.putByteArray(cw.cr.b,classReaderOffset,classReaderLength);
    return;
  }
  int attributeCount=0;
  if (code.length > 0) {
    ++attributeCount;
  }
  if (exceptionCount > 0) {
    ++attributeCount;
  }
  if ((access & Opcodes.ACC_SYNTHETIC) != 0 && (cw.version & 0xffff) < Opcodes.V1_5) {
    ++attributeCount;
  }
  if ((access & Opcodes.ACC_DEPRECATED) != 0) {
    ++attributeCount;
  }
  if (ClassReader.SIGNATURES && signature != null) {
    ++attributeCount;
  }
  if (ClassReader.ANNOTATIONS && annd != null) {
    ++attributeCount;
  }
  if (ClassReader.ANNOTATIONS && anns != null) {
    ++attributeCount;
  }
  if (ClassReader.ANNOTATIONS && ianns != null) {
    ++attributeCount;
  }
  if (ClassReader.ANNOTATIONS && panns != null) {
    ++attributeCount;
  }
  if (ClassReader.ANNOTATIONS && ipanns != null) {
    ++attributeCount;
  }
  if (attrs != null) {
    attributeCount+=attrs.getCount();
  }
  out.putShort(attributeCount);
  if (code.length > 0) {
    int size=12 + code.length + 8 * handlerCount;
    if (localVar != null) {
      size+=8 + localVar.length;
    }
    if (localVarType != null) {
      size+=8 + localVarType.length;
    }
    if (lineNumber != null) {
      size+=8 + lineNumber.length;
    }
    if (stackMap != null) {
      size+=8 + stackMap.length;
    }
    if (cattrs != null) {
      size+=cattrs.getSize(cw,code.data,code.length,maxStack,maxLocals);
    }
    out.putShort(cw.newUTF8("Code")).putInt(size);
    out.putShort(maxStack).putShort(maxLocals);
    out.putInt(code.length).putByteArray(code.data,0,code.length);
    out.putShort(handlerCount);
    if (handlerCount > 0) {
      Handler h=firstHandler;
      while (h != null) {
        out.putShort(h.start.position).putShort(h.end.position).putShort(h.handler.position).putShort(h.type);
        h=h.next;
      }
    }
    attributeCount=0;
    if (localVar != null) {
      ++attributeCount;
    }
    if (localVarType != null) {
      ++attributeCount;
    }
    if (lineNumber != null) {
      ++attributeCount;
    }
    if (stackMap != null) {
      ++attributeCount;
    }
    if (cattrs != null) {
      attributeCount+=cattrs.getCount();
    }
    out.putShort(attributeCount);
    if (localVar != null) {
      out.putShort(cw.newUTF8("LocalVariableTable"));
      out.putInt(localVar.length + 2).putShort(localVarCount);
      out.putByteArray(localVar.data,0,localVar.length);
    }
    if (localVarType != null) {
      out.putShort(cw.newUTF8("LocalVariableTypeTable"));
      out.putInt(localVarType.length + 2).putShort(localVarTypeCount);
      out.putByteArray(localVarType.data,0,localVarType.length);
    }
    if (lineNumber != null) {
      out.putShort(cw.newUTF8("LineNumberTable"));
      out.putInt(lineNumber.length + 2).putShort(lineNumberCount);
      out.putByteArray(lineNumber.data,0,lineNumber.length);
    }
    if (stackMap != null) {
      boolean zip=(cw.version & 0xFFFF) >= Opcodes.V1_6;
      out.putShort(cw.newUTF8(zip ? "StackMapTable" : "StackMap"));
      out.putInt(stackMap.length + 2).putShort(frameCount);
      out.putByteArray(stackMap.data,0,stackMap.length);
    }
    if (cattrs != null) {
      cattrs.put(cw,code.data,code.length,maxLocals,maxStack,out);
    }
  }
  if (exceptionCount > 0) {
    out.putShort(cw.newUTF8("Exceptions")).putInt(2 * exceptionCount + 2);
    out.putShort(exceptionCount);
    for (int i=0; i < exceptionCount; ++i) {
      out.putShort(exceptions[i]);
    }
  }
  if ((access & Opcodes.ACC_SYNTHETIC) != 0 && (cw.version & 0xffff) < Opcodes.V1_5) {
    out.putShort(cw.newUTF8("Synthetic")).putInt(0);
  }
  if ((access & Opcodes.ACC_DEPRECATED) != 0) {
    out.putShort(cw.newUTF8("Deprecated")).putInt(0);
  }
  if (ClassReader.SIGNATURES && signature != null) {
    out.putShort(cw.newUTF8("Signature")).putInt(2).putShort(cw.newUTF8(signature));
  }
  if (ClassReader.ANNOTATIONS && annd != null) {
    out.putShort(cw.newUTF8("AnnotationDefault"));
    out.putInt(annd.length);
    out.putByteArray(annd.data,0,annd.length);
  }
  if (ClassReader.ANNOTATIONS && anns != null) {
    out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"));
    anns.put(out);
  }
  if (ClassReader.ANNOTATIONS && ianns != null) {
    out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"));
    ianns.put(out);
  }
  if (ClassReader.ANNOTATIONS && panns != null) {
    out.putShort(cw.newUTF8("RuntimeVisibleParameterAnnotations"));
    AnnotationWriter.put(panns,synthetics,out);
  }
  if (ClassReader.ANNOTATIONS && ipanns != null) {
    out.putShort(cw.newUTF8("RuntimeInvisibleParameterAnnotations"));
    AnnotationWriter.put(ipanns,synthetics,out);
  }
  if (attrs != null) {
    attrs.put(cw,null,0,-1,-1,out);
  }
}
