{
  Object defaultReturnValue=delegate.valueFor(invocation);
  if (defaultReturnValue != null) {
    return defaultReturnValue;
  }
  Class<?> type=invocation.getMethod().getReturnType();
  if (ClassImposterizer.INSTANCE.canImposterise(type)) {
    return ClassImposterizer.INSTANCE.imposterise(new MethodInterceptor(){
      Exception whenCreated=new UndesiredInvocation("Unstubbed method was invoked here");
      public Object intercept(      Object obj,      Method method,      Object[] args,      MethodProxy proxy) throws Throwable {
        throw new SmartNullPointerException("oops",whenCreated);
      }
    }
,type);
  }
  return null;
}
