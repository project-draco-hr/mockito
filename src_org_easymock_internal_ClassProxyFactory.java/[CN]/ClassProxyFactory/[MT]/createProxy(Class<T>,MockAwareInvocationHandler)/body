{
  if (!toMock.isInterface()) {
    try {
      updateMethod(handler,toMock.getMethod("equals",new Class[]{Object.class}));
      updateMethod(handler,toMock.getMethod("hashCode",new Class[0]));
      updateMethod(handler,toMock.getMethod("toString",new Class[0]));
    }
 catch (    NoSuchMethodException e) {
      throw new RuntimeException("We strangly failed to retrieve methods that always exist on an object...");
    }
  }
  MethodInterceptor interceptor=new MockMethodInterceptor(){
    private Set<Method> mockedMethods;
    public Object intercept(    Object obj,    Method method,    Object[] args,    MethodProxy proxy) throws Throwable {
      if (method.isBridge()) {
        return proxy.invokeSuper(obj,args);
      }
      if (mockedMethods != null && !mockedMethods.contains(method)) {
        return proxy.invokeSuper(obj,args);
      }
      return handler.invoke(obj,method,args);
    }
    public InvocationHandler getHandler(){
      return handler;
    }
    public void setMockedMethods(    Method[] mockedMethods){
      this.mockedMethods=new HashSet<Method>(Arrays.asList(mockedMethods));
    }
  }
;
  Enhancer enhancer=new Enhancer(){
    /** 
 * Filter all private constructors but do not check that there are
 * some left
 */
    protected void filterConstructors(    Class sc,    List constructors){
      CollectionUtils.filter(constructors,new VisibilityPredicate(sc,true));
    }
  }
;
  if (toMock.isInterface()) {
    enhancer.setInterfaces(new Class[]{toMock});
  }
 else {
    enhancer.setSuperclass(toMock);
  }
  enhancer.setCallbackType(interceptor.getClass());
  Class mockClass=enhancer.createClass();
  Enhancer.registerCallbacks(mockClass,new Callback[]{interceptor});
  Factory mock;
  try {
    mock=(Factory)ObjenesisClassInstantiator.newInstance(mockClass);
  }
 catch (  InstantiationException e) {
    throw new RuntimeException("Fail to instantiate mock for " + toMock + " on "+ System.getProperty("java.vm.vendor")+ " JVM");
  }
  mock.getCallback(0);
  handler.setMock(mock);
  return (T)mock;
}
