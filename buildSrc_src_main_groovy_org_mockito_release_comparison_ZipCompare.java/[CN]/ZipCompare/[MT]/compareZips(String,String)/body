{
  ZipFile file1;
  try {
    file1=new ZipFile(filePath1);
  }
 catch (  IOException e) {
    throw new ZipCompareException("Could not open zip file " + filePath1,e);
  }
  ZipFile file2;
  try {
    file2=new ZipFile(filePath2);
  }
 catch (  IOException e) {
    throw new ZipCompareException("Could not open zip file " + filePath1,e);
  }
  LOG.info("Comparing " + filePath1 + " with "+ filePath2);
  Set<String> set1=new LinkedHashSet<String>();
  for (Enumeration e=file1.entries(); e.hasMoreElements(); )   set1.add(((ZipEntry)e.nextElement()).getName());
  Set<String> set2=new LinkedHashSet<String>();
  for (Enumeration e=file2.entries(); e.hasMoreElements(); )   set2.add(((ZipEntry)e.nextElement()).getName());
  int errcount=0;
  int filecount=0;
  for (  String name : set1) {
    if (!set2.contains(name)) {
      LOG.info(name + " not found in " + filePath2);
      errcount+=1;
      continue;
    }
    try {
      set2.remove(name);
      if (!streamsEqual(file1.getInputStream(file1.getEntry(name)),file2.getInputStream(file2.getEntry(name)))) {
        LOG.info(name + " does not match");
        errcount+=1;
        continue;
      }
    }
 catch (    Exception e) {
      throw new ZipCompareException(format("Unable to compare zip entry '%s' found in '%s' with '%s'",name,filePath1,filePath2),e);
    }
    filecount+=1;
  }
  for (  String name : set2) {
    LOG.info(name + " not found in " + filePath1);
    errcount+=1;
  }
  LOG.info(filecount + " entries matched");
  if (errcount > 0) {
    LOG.info(errcount + " entries did not match");
    return false;
  }
  return true;
}
