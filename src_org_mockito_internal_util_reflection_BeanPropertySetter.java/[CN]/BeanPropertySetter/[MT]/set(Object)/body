{
  AccessibilityChanger changer=new AccessibilityChanger();
  Method writeMethod=null;
  try {
    BeanInfo targetInfo=Introspector.getBeanInfo(target.getClass());
    PropertyDescriptor[] propertyDescriptors=targetInfo.getPropertyDescriptors();
    for (    PropertyDescriptor propertyDescriptor : propertyDescriptors) {
      if (propertyNameMatchFieldName(propertyDescriptor) && propertyTypeMatchFieldType(propertyDescriptor)) {
        writeMethod=propertyDescriptor.getWriteMethod();
        if (writeMethod != null) {
          changer.enableAccess(writeMethod);
          writeMethod.invoke(target,value);
          return true;
        }
      }
    }
  }
 catch (  InvocationTargetException e) {
    throw new RuntimeException("Problems setting value:[" + value + "] on object: ["+ target+ "] the setter of property ["+ field.getName()+ "] threw an exception",e.getTargetException());
  }
catch (  IllegalAccessException e) {
    throw new RuntimeException("Problems setting value:[" + value + "] on object: ["+ target+ "] the setter of property ["+ field.getName()+ "] is not accessible",e);
  }
catch (  IntrospectionException e) {
    throw new RuntimeException("Problems setting value: [" + value + "] on object: ["+ target+ "] for property : ["+ field.getName()+ "], cannot introspect "+ target.getClass(),e);
  }
 finally {
    if (writeMethod != null) {
      changer.safelyDisableAccess(writeMethod);
    }
  }
  reportNoSetterFound();
  return false;
}
