{
  return new BaseMatcher(){
    public boolean matches(    Object traceElements){
      final List<StackTraceElement> trace;
      if (traceElements instanceof List) {
        trace=(List<StackTraceElement>)traceElements;
      }
 else       if (traceElements instanceof HasStackTrace) {
        trace=Arrays.asList(((HasStackTrace)traceElements).getStackTrace());
      }
 else {
        throw new RuntimeException("this matcher cannot deal with object provided: " + traceElements);
      }
      if (trace.size() != methods.length) {
        return false;
      }
      for (int i=0; i < trace.size(); i++) {
        if (!trace.get(i).getMethodName().equals(methods[i])) {
          return false;
        }
      }
      return true;
    }
    public void describeTo(    Description desc){
      desc.appendText("has only those methods in stack trace: ");
      desc.appendValue(methods);
    }
  }
;
}
