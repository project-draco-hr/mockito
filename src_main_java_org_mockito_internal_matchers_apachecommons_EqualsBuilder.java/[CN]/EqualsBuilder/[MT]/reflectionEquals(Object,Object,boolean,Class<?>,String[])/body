{
  if (lhs == rhs) {
    return true;
  }
  if (lhs == null || rhs == null) {
    return false;
  }
  Class<?> lhsClass=lhs.getClass();
  Class<?> rhsClass=rhs.getClass();
  Class<?> testClass;
  if (lhsClass.isInstance(rhs)) {
    testClass=lhsClass;
    if (!rhsClass.isInstance(lhs)) {
      testClass=rhsClass;
    }
  }
 else   if (rhsClass.isInstance(lhs)) {
    testClass=rhsClass;
    if (!lhsClass.isInstance(rhs)) {
      testClass=lhsClass;
    }
  }
 else {
    return false;
  }
  EqualsBuilder equalsBuilder=new EqualsBuilder();
  try {
    reflectionAppend(lhs,rhs,testClass,equalsBuilder,testTransients,excludeFields);
    while (testClass.getSuperclass() != null && testClass != reflectUpToClass) {
      testClass=testClass.getSuperclass();
      reflectionAppend(lhs,rhs,testClass,equalsBuilder,testTransients,excludeFields);
    }
  }
 catch (  IllegalArgumentException e) {
    return false;
  }
  return equalsBuilder.isEquals();
}
