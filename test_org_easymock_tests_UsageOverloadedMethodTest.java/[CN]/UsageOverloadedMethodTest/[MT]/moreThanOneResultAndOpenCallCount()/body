{
  mock.oneArg(true);
  controller.setReturnValue("First Result",4);
  controller.setReturnValue("Second Result",2);
  controller.setThrowable(new RuntimeException("Third Result"),3);
  controller.setReturnValue("Following Result",MockControl.ONE_OR_MORE);
  controller.replay();
  assertEquals("First Result",mock.oneArg(true));
  assertEquals("First Result",mock.oneArg(true));
  assertEquals("First Result",mock.oneArg(true));
  assertEquals("First Result",mock.oneArg(true));
  assertEquals("Second Result",mock.oneArg(true));
  assertEquals("Second Result",mock.oneArg(true));
  try {
    mock.oneArg(true);
    fail("expected exception");
  }
 catch (  RuntimeException expected) {
    assertEquals("Third Result",expected.getMessage());
  }
  try {
    mock.oneArg(true);
    fail("expected exception");
  }
 catch (  RuntimeException expected) {
    assertEquals("Third Result",expected.getMessage());
  }
  try {
    mock.oneArg(true);
    fail("expected exception");
  }
 catch (  RuntimeException expected) {
    assertEquals("Third Result",expected.getMessage());
  }
  assertEquals("Following Result",mock.oneArg(true));
  assertEquals("Following Result",mock.oneArg(true));
  assertEquals("Following Result",mock.oneArg(true));
  assertEquals("Following Result",mock.oneArg(true));
  assertEquals("Following Result",mock.oneArg(true));
  controller.verify();
}
