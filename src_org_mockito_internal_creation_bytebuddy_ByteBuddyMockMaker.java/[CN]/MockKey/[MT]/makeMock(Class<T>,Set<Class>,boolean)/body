{
  DynamicType.Builder<T> builder=byteBuddy.subclass(mockType,ConstructorStrategy.Default.NO_CONSTRUCTORS).name(nameFor(mockType)).implement(interfaces.toArray(new Class<?>[interfaces.size()])).method(any()).intercept(MethodDelegation.toInstanceField(MethodInterceptor.class,"mockitoInterceptor").filter(isDeclaredBy(MethodInterceptor.class))).implement(MethodInterceptor.Access.class).intercept(FieldAccessor.ofBeanProperty()).method(isHashCode()).intercept(MethodDelegation.to(MethodInterceptor.ForHashCode.class)).method(isEquals()).intercept(MethodDelegation.to(MethodInterceptor.ForEquals.class));
  if (acrossClassLoaderSerialization) {
    builder=builder.defineMethod("writeReplace",Object.class,Collections.<Class<?>>emptyList(),MemberVisibility.PRIVATE).throwing(ObjectStreamException.class).intercept(MethodDelegation.to(MethodInterceptor.ForWriteReplace.class));
  }
  Class<?>[] allMockedTypes=new Class<?>[interfaces.size() + 1];
  allMockedTypes[0]=mockType;
  int index=1;
  for (  Class<?> type : interfaces) {
    allMockedTypes[index++]=type;
  }
  return builder.make().load(SearchingClassLoader.combineLoadersOf(allMockedTypes),ClassLoadingStrategy.Default.INJECTION).getLoaded();
}
