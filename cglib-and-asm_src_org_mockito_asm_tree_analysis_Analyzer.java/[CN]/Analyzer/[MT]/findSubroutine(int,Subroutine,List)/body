{
  while (true) {
    if (insn < 0 || insn >= n) {
      throw new AnalyzerException("Execution can fall off end of the code");
    }
    if (subroutines[insn] != null) {
      return;
    }
    subroutines[insn]=sub.copy();
    AbstractInsnNode node=insns.get(insn);
    if (node instanceof JumpInsnNode) {
      if (node.getOpcode() == JSR) {
        calls.add(node);
      }
 else {
        JumpInsnNode jnode=(JumpInsnNode)node;
        findSubroutine(insns.indexOf(jnode.label),sub,calls);
      }
    }
 else     if (node instanceof TableSwitchInsnNode) {
      TableSwitchInsnNode tsnode=(TableSwitchInsnNode)node;
      findSubroutine(insns.indexOf(tsnode.dflt),sub,calls);
      for (int i=tsnode.labels.size() - 1; i >= 0; --i) {
        LabelNode l=(LabelNode)tsnode.labels.get(i);
        findSubroutine(insns.indexOf(l),sub,calls);
      }
    }
 else     if (node instanceof LookupSwitchInsnNode) {
      LookupSwitchInsnNode lsnode=(LookupSwitchInsnNode)node;
      findSubroutine(insns.indexOf(lsnode.dflt),sub,calls);
      for (int i=lsnode.labels.size() - 1; i >= 0; --i) {
        LabelNode l=(LabelNode)lsnode.labels.get(i);
        findSubroutine(insns.indexOf(l),sub,calls);
      }
    }
    List insnHandlers=handlers[insn];
    if (insnHandlers != null) {
      for (int i=0; i < insnHandlers.size(); ++i) {
        TryCatchBlockNode tcb=(TryCatchBlockNode)insnHandlers.get(i);
        findSubroutine(insns.indexOf(tcb.handler),sub,calls);
      }
    }
switch (node.getOpcode()) {
case GOTO:
case RET:
case TABLESWITCH:
case LOOKUPSWITCH:
case IRETURN:
case LRETURN:
case FRETURN:
case DRETURN:
case ARETURN:
case RETURN:
case ATHROW:
      return;
  }
  insn++;
}
}
