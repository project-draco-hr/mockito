{
  MockSettings settings=withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS).name(field.getName());
  Class<?> type=field.getType();
  if (type.isInterface()) {
    return Mockito.mock(type,settings.useConstructor());
  }
  if (!Modifier.isStatic(type.getModifiers())) {
    Class<?> enclosing=type.getEnclosingClass();
    if (enclosing != null) {
      if (!enclosing.isInstance(testInstance)) {
        throw new MockitoException("If you are mocking an inner class please ensure the instance of the outer class is supplied via withSettings().outerInstance()" + "\nThe outer class is: '" + enclosing.getSimpleName() + "'");
      }
      return Mockito.mock(type,settings.useConstructor().outerInstance(testInstance));
    }
  }
  Constructor<?> constructor;
  try {
    constructor=type.getDeclaredConstructor();
  }
 catch (  NoSuchMethodException e) {
    throw new MockitoException("Please ensure that the type '" + type.getSimpleName() + "' has 0-arg constructor.");
  }
  if (Modifier.isPrivate(constructor.getModifiers())) {
    constructor.setAccessible(true);
    return Mockito.mock(type,settings.spiedInstance(constructor.newInstance()));
  }
 else {
    return Mockito.mock(type,settings.useConstructor());
  }
}
