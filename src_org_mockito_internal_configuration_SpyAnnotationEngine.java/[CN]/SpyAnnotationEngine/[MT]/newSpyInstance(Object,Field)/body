{
  MockSettings settings=withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS).name(field.getName());
  Class<?> type=field.getType();
  if (type.isInterface()) {
    return Mockito.mock(type,settings.useConstructor());
  }
  try {
    if (!Modifier.isStatic(type.getModifiers())) {
      Class<?> enclosing=type.getEnclosingClass();
      if (enclosing != null) {
        if (!enclosing.isInstance(testInstance)) {
          throw new MockitoException("Unable to initialize @Spy annotated field '" + field.getName() + "'."+ "\nIf you are mocking an inner class please ensure the instance of the outer class is supplied via withSettings().outerInstance()"+ "\nThe outer class is: '"+ enclosing.getSimpleName()+ "'");
        }
        if (Modifier.isPrivate(type.getDeclaredConstructor(enclosing).getModifiers())) {
          throw new MockitoException("Cannot spy inner " + type + " with private constructor");
        }
        return Mockito.mock(type,settings.useConstructor().outerInstance(testInstance));
      }
    }
    Constructor<?> constructor=type.getDeclaredConstructor();
    if (Modifier.isPrivate(constructor.getModifiers())) {
      constructor.setAccessible(true);
      return Mockito.mock(type,settings.spiedInstance(constructor.newInstance()));
    }
 else {
      return Mockito.mock(type,settings.useConstructor());
    }
  }
 catch (  NoSuchMethodException noDefaultConstructor) {
    throw new MockitoException("Unable to initialize @Spy annotated field '" + field.getName() + "'. Please ensure that the type '"+ type.getSimpleName()+ "' has 0-arg constructor.");
  }
}
