{
  try {
    final Map cache=new HashMap();
    final ParameterTyper cached=new ParameterTyper(){
      public Type[] getParameterTypes(      MethodInfo member){
        Type[] types=(Type[])cache.get(member);
        if (types == null) {
          cache.put(member,types=member.getSignature().getArgumentTypes());
        }
        return types;
      }
    }
;
    final Label def=e.make_label();
    final Label end=e.make_label();
    if (useName) {
      e.swap();
      final Map buckets=CollectionUtils.bucket(members,new Transformer(){
        public Object transform(        Object value){
          return ((MethodInfo)value).getSignature().getName();
        }
      }
);
      String[] names=(String[])buckets.keySet().toArray(new String[buckets.size()]);
      EmitUtils.string_switch(e,names,Constants.SWITCH_STYLE_HASH,new ObjectSwitchCallback(){
        public void processCase(        Object key,        Label dontUseEnd) throws Exception {
          member_helper_size(e,(List)buckets.get(key),callback,cached,def,end);
        }
        public void processDefault() throws Exception {
          e.goTo(def);
        }
      }
);
    }
 else {
      member_helper_size(e,members,callback,cached,def,end);
    }
    e.mark(def);
    e.pop();
    callback.processDefault();
    e.mark(end);
  }
 catch (  RuntimeException ex) {
    throw ex;
  }
catch (  Error ex) {
    throw ex;
  }
catch (  Exception ex) {
    throw new CodeGenerationException(ex);
  }
}
