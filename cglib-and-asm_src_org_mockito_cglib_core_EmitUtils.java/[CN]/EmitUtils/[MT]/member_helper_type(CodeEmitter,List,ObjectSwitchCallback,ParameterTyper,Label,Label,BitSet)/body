{
  if (members.size() == 1) {
    MethodInfo member=(MethodInfo)members.get(0);
    Type[] types=typer.getParameterTypes(member);
    for (int i=0; i < types.length; i++) {
      if (checked == null || !checked.get(i)) {
        e.dup();
        e.aaload(i);
        e.invoke_virtual(Constants.TYPE_CLASS,GET_NAME);
        e.push(TypeUtils.emulateClassGetName(types[i]));
        e.invoke_virtual(Constants.TYPE_OBJECT,EQUALS);
        e.if_jump(e.EQ,def);
      }
    }
    e.pop();
    callback.processCase(member,end);
  }
 else {
    Type[] example=typer.getParameterTypes((MethodInfo)members.get(0));
    Map buckets=null;
    int index=-1;
    for (int i=0; i < example.length; i++) {
      final int j=i;
      Map test=CollectionUtils.bucket(members,new Transformer(){
        public Object transform(        Object value){
          return TypeUtils.emulateClassGetName(typer.getParameterTypes((MethodInfo)value)[j]);
        }
      }
);
      if (buckets == null || test.size() > buckets.size()) {
        buckets=test;
        index=i;
      }
    }
    if (buckets == null || buckets.size() == 1) {
      e.goTo(def);
    }
 else {
      checked.set(index);
      e.dup();
      e.aaload(index);
      e.invoke_virtual(Constants.TYPE_CLASS,GET_NAME);
      final Map fbuckets=buckets;
      String[] names=(String[])buckets.keySet().toArray(new String[buckets.size()]);
      EmitUtils.string_switch(e,names,Constants.SWITCH_STYLE_HASH,new ObjectSwitchCallback(){
        public void processCase(        Object key,        Label dontUseEnd) throws Exception {
          member_helper_type(e,(List)fbuckets.get(key),callback,typer,def,end,checked);
        }
        public void processDefault() throws Exception {
          e.goTo(def);
        }
      }
);
    }
  }
}
