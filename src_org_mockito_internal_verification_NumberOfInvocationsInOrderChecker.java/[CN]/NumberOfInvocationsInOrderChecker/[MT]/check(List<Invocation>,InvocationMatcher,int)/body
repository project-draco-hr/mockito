{
  List<Invocation> chunk=finder.findMatchingChunk(invocations,wanted,wantedCount);
  boolean noMatchFound=chunk.size() == 0;
  if (wantedCount == 0 && noMatchFound) {
    return;
  }
  int actualCount=chunk.size();
  if (wantedCount > actualCount) {
    HasStackTrace lastInvocation=finder.getLastStackTrace(chunk);
    reporter.tooLittleActualInvocationsInOrder(wantedCount,actualCount,wanted,lastInvocation);
  }
 else   if (wantedCount < actualCount) {
    HasStackTrace firstUndesired=chunk.get(wantedCount).getStackTrace();
    reporter.tooManyActualInvocationsInOrder(wantedCount,actualCount,wanted,firstUndesired);
  }
  for (  Invocation i : chunk) {
    i.markVerifiedInOrder();
  }
}
