{
  assertEquals(Integer.class,genericTypeOfMatcher(IntMatcher.class));
  assertEquals(Integer.class,genericTypeOfMatcher(StaticIntMatcher.class));
  assertEquals(Integer.class,genericTypeOfMatcher(IntMatcherFromInterface.class));
  assertEquals(Integer.class,genericTypeOfMatcher(StaticIntMatcherSubclass.class));
  assertEquals(Integer.class,genericTypeOfMatcher(IntMatcherFromInterface.class));
  assertEquals(Integer.class,genericTypeOfMatcher(StaticIntMatcherFromInterface.class));
  assertEquals(Integer.class,genericTypeOfMatcher(SubclassGenericMatcherFromInterface.class));
  assertEquals(Integer.class,genericTypeOfMatcher(InsaneEdgeCase.class));
  assertEquals(Integer.class,genericTypeOfMatcher(new BaseMatcher<Integer>(){
    public void describeTo(    Description description){
    }
    public boolean matches(    Object o){
      return false;
    }
  }
.getClass()));
  assertEquals(Integer.class,genericTypeOfMatcher(new Matcher<Integer>(){
    public void describeTo(    Description description){
    }
    public boolean matches(    Object o){
      return false;
    }
    public void _dont_implement_Matcher___instead_extend_BaseMatcher_(){
    }
  }
.getClass()));
  assertEquals(Object.class,genericTypeOfMatcher(Object.class));
  assertEquals(Object.class,genericTypeOfMatcher(String.class));
  assertEquals(Object.class,genericTypeOfMatcher(new HashMap<String,String>().getClass()));
  assertEquals(Object.class,genericTypeOfMatcher(new HashMap<String,String>(){
  }
.getClass()));
  assertEquals(Object.class,genericTypeOfMatcher(NonGenericMatcher.class));
  assertEquals(Object.class,genericTypeOfMatcher(NonGenericMatcherFromInterface.class));
}
