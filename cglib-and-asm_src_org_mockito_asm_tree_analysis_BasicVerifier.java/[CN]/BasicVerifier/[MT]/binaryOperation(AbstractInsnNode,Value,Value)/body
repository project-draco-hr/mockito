{
  Value expected1;
  Value expected2;
switch (insn.getOpcode()) {
case IALOAD:
    expected1=newValue(Type.getType("[I"));
  expected2=BasicValue.INT_VALUE;
break;
case BALOAD:
if (isSubTypeOf(value1,newValue(Type.getType("[Z")))) {
expected1=newValue(Type.getType("[Z"));
}
 else {
expected1=newValue(Type.getType("[B"));
}
expected2=BasicValue.INT_VALUE;
break;
case CALOAD:
expected1=newValue(Type.getType("[C"));
expected2=BasicValue.INT_VALUE;
break;
case SALOAD:
expected1=newValue(Type.getType("[S"));
expected2=BasicValue.INT_VALUE;
break;
case LALOAD:
expected1=newValue(Type.getType("[J"));
expected2=BasicValue.INT_VALUE;
break;
case FALOAD:
expected1=newValue(Type.getType("[F"));
expected2=BasicValue.INT_VALUE;
break;
case DALOAD:
expected1=newValue(Type.getType("[D"));
expected2=BasicValue.INT_VALUE;
break;
case AALOAD:
expected1=newValue(Type.getType("[Ljava/lang/Object;"));
expected2=BasicValue.INT_VALUE;
break;
case IADD:
case ISUB:
case IMUL:
case IDIV:
case IREM:
case ISHL:
case ISHR:
case IUSHR:
case IAND:
case IOR:
case IXOR:
case IF_ICMPEQ:
case IF_ICMPNE:
case IF_ICMPLT:
case IF_ICMPGE:
case IF_ICMPGT:
case IF_ICMPLE:
expected1=BasicValue.INT_VALUE;
expected2=BasicValue.INT_VALUE;
break;
case FADD:
case FSUB:
case FMUL:
case FDIV:
case FREM:
case FCMPL:
case FCMPG:
expected1=BasicValue.FLOAT_VALUE;
expected2=BasicValue.FLOAT_VALUE;
break;
case LADD:
case LSUB:
case LMUL:
case LDIV:
case LREM:
case LAND:
case LOR:
case LXOR:
case LCMP:
expected1=BasicValue.LONG_VALUE;
expected2=BasicValue.LONG_VALUE;
break;
case LSHL:
case LSHR:
case LUSHR:
expected1=BasicValue.LONG_VALUE;
expected2=BasicValue.INT_VALUE;
break;
case DADD:
case DSUB:
case DMUL:
case DDIV:
case DREM:
case DCMPL:
case DCMPG:
expected1=BasicValue.DOUBLE_VALUE;
expected2=BasicValue.DOUBLE_VALUE;
break;
case IF_ACMPEQ:
case IF_ACMPNE:
expected1=BasicValue.REFERENCE_VALUE;
expected2=BasicValue.REFERENCE_VALUE;
break;
case PUTFIELD:
FieldInsnNode fin=(FieldInsnNode)insn;
expected1=newValue(Type.getObjectType(fin.owner));
expected2=newValue(Type.getType(fin.desc));
break;
default :
throw new Error("Internal error.");
}
if (!isSubTypeOf(value1,expected1)) {
throw new AnalyzerException("First argument",expected1,value1);
}
 else if (!isSubTypeOf(value2,expected2)) {
throw new AnalyzerException("Second argument",expected2,value2);
}
if (insn.getOpcode() == AALOAD) {
return getElementValue(value1);
}
 else {
return super.binaryOperation(insn,value1,value2);
}
}
