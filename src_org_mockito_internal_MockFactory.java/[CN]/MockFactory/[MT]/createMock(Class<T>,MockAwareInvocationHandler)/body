{
  MethodInterceptor interceptor=new MockMethodInterceptor(){
    public Object intercept(    Object obj,    Method method,    Object[] args,    MethodProxy proxy) throws Throwable {
      System.err.println(method + " " + method.isBridge());
      if (method.isBridge()) {
        return proxy.invokeSuper(obj,args);
      }
      return handler.invoke(obj,method,args);
    }
    public InvocationHandler getHandler(){
      return handler;
    }
  }
;
  Enhancer enhancer=new Enhancer(){
    /** 
 * Filter all private constructors but do not check that there are
 * some left
 */
    protected void filterConstructors(    Class sc,    List constructors){
      CollectionUtils.filter(constructors,new VisibilityPredicate(sc,true));
    }
  }
;
  if (toMock.isInterface()) {
    enhancer.setInterfaces(new Class[]{toMock});
  }
 else {
    enhancer.setSuperclass(toMock);
  }
  enhancer.setCallbackType(interceptor.getClass());
  Class mockClass=enhancer.createClass();
  Enhancer.registerCallbacks(mockClass,new Callback[]{interceptor});
  Factory mock;
  try {
    mock=(Factory)ObjenesisClassInstantiator.newInstance(mockClass);
  }
 catch (  InstantiationException e) {
    throw new RuntimeException("Fail to instantiate mock for " + toMock + " on "+ System.getProperty("java.vm.vendor")+ " JVM");
  }
  mock.getCallback(0);
  handler.setMock(mock);
  return (T)mock;
}
