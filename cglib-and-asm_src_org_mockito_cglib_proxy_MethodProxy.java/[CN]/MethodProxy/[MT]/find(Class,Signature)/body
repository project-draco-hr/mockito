{
  try {
    Method m=type.getDeclaredMethod(MethodInterceptorGenerator.FIND_PROXY_NAME,MethodInterceptorGenerator.FIND_PROXY_TYPES);
    return (MethodProxy)m.invoke(null,new Object[]{sig});
  }
 catch (  NoSuchMethodException e) {
    throw new IllegalArgumentException("Class " + type + " does not use a MethodInterceptor");
  }
catch (  IllegalAccessException e) {
    throw new CodeGenerationException(e);
  }
catch (  InvocationTargetException e) {
    throw new CodeGenerationException(e);
  }
}
