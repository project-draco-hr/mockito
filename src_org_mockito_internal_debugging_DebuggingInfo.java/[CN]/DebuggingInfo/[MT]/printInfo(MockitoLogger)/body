{
  if (!shouldPrint()) {
    return;
  }
  Iterator<Invocation> unusedIterator=unusedStubs.iterator();
  while (unusedIterator.hasNext()) {
    Invocation unused=unusedIterator.next();
    Iterator<InvocationMatcher> unstubbedIterator=unstubbedInvocations.iterator();
    while (unstubbedIterator.hasNext()) {
      InvocationMatcher unstubbed=unstubbedIterator.next();
      if (unstubbed.hasSimilarMethod(unused)) {
        logger.print("Warning - stubbed method called with different arguments.");
        logger.print("Stubbed like that:");
        logger.print(unused);
        logger.print("Click here to see it in your code:");
        logger.print(unused.getStackTrace().getStackTrace()[0]);
        logger.print("But called with different arguments:");
        logger.print(unstubbed.getInvocation());
        logger.print("Click here to see it in your code:");
        logger.print(unstubbed.getInvocation().getStackTrace().getStackTrace()[0]);
        logger.print();
        unusedIterator.remove();
        unstubbedIterator.remove();
      }
    }
  }
  for (  Invocation i : unusedStubs) {
    logger.print("Warning - this stub was not used:");
    logger.print(i);
    logger.print("Click here to see it in your code:");
    logger.print(i.getStackTrace().getStackTrace()[0]);
    logger.print();
  }
  for (  InvocationMatcher i : unstubbedInvocations) {
    logger.print("Warning - this method was not stubbed:");
    logger.print(i.getInvocation());
    logger.print("Click here to see it in your code:");
    logger.print(i.getInvocation().getStackTrace().getStackTrace()[0]);
    logger.print();
  }
}
