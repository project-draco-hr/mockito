{
  Type sourceType=Type.getType(source);
  Type targetType=Type.getType(target);
  ClassEmitter ce=new ClassEmitter(v);
  ce.begin_class(Constants.V1_2,Constants.ACC_PUBLIC,getClassName(),BEAN_COPIER,null,Constants.SOURCE_FILE);
  EmitUtils.null_constructor(ce);
  CodeEmitter e=ce.begin_method(Constants.ACC_PUBLIC,COPY,null);
  PropertyDescriptor[] getters=ReflectUtils.getBeanGetters(source);
  PropertyDescriptor[] setters=ReflectUtils.getBeanGetters(target);
  Map names=new HashMap();
  for (int i=0; i < getters.length; i++) {
    names.put(getters[i].getName(),getters[i]);
  }
  Local targetLocal=e.make_local();
  Local sourceLocal=e.make_local();
  if (useConverter) {
    e.load_arg(1);
    e.checkcast(targetType);
    e.store_local(targetLocal);
    e.load_arg(0);
    e.checkcast(sourceType);
    e.store_local(sourceLocal);
  }
 else {
    e.load_arg(1);
    e.checkcast(targetType);
    e.load_arg(0);
    e.checkcast(sourceType);
  }
  for (int i=0; i < setters.length; i++) {
    PropertyDescriptor setter=setters[i];
    PropertyDescriptor getter=(PropertyDescriptor)names.get(setter.getName());
    if (getter != null) {
      MethodInfo read=ReflectUtils.getMethodInfo(getter.getReadMethod());
      MethodInfo write=ReflectUtils.getMethodInfo(setter.getWriteMethod());
      if (useConverter) {
        Type setterType=write.getSignature().getArgumentTypes()[0];
        e.load_local(targetLocal);
        e.load_arg(2);
        e.load_local(sourceLocal);
        e.invoke(read);
        e.box(read.getSignature().getReturnType());
        EmitUtils.load_class(e,setterType);
        e.push(write.getSignature().getName());
        e.invoke_interface(CONVERTER,CONVERT);
        e.unbox_or_zero(setterType);
        e.invoke(write);
      }
 else       if (compatible(getter,setter)) {
        e.dup2();
        e.invoke(read);
        e.invoke(write);
      }
    }
  }
  e.return_value();
  e.end_method();
  ce.end_class();
}
