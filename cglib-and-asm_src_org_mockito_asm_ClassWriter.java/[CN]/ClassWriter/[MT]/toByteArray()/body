{
  int size=24 + 2 * interfaceCount;
  int nbFields=0;
  FieldWriter fb=firstField;
  while (fb != null) {
    ++nbFields;
    size+=fb.getSize();
    fb=fb.next;
  }
  int nbMethods=0;
  MethodWriter mb=firstMethod;
  while (mb != null) {
    ++nbMethods;
    size+=mb.getSize();
    mb=mb.next;
  }
  int attributeCount=0;
  if (ClassReader.SIGNATURES && signature != 0) {
    ++attributeCount;
    size+=8;
    newUTF8("Signature");
  }
  if (sourceFile != 0) {
    ++attributeCount;
    size+=8;
    newUTF8("SourceFile");
  }
  if (sourceDebug != null) {
    ++attributeCount;
    size+=sourceDebug.length + 4;
    newUTF8("SourceDebugExtension");
  }
  if (enclosingMethodOwner != 0) {
    ++attributeCount;
    size+=10;
    newUTF8("EnclosingMethod");
  }
  if ((access & Opcodes.ACC_DEPRECATED) != 0) {
    ++attributeCount;
    size+=6;
    newUTF8("Deprecated");
  }
  if ((access & Opcodes.ACC_SYNTHETIC) != 0 && (version & 0xffff) < Opcodes.V1_5) {
    ++attributeCount;
    size+=6;
    newUTF8("Synthetic");
  }
  if (innerClasses != null) {
    ++attributeCount;
    size+=8 + innerClasses.length;
    newUTF8("InnerClasses");
  }
  if (ClassReader.ANNOTATIONS && anns != null) {
    ++attributeCount;
    size+=8 + anns.getSize();
    newUTF8("RuntimeVisibleAnnotations");
  }
  if (ClassReader.ANNOTATIONS && ianns != null) {
    ++attributeCount;
    size+=8 + ianns.getSize();
    newUTF8("RuntimeInvisibleAnnotations");
  }
  if (attrs != null) {
    attributeCount+=attrs.getCount();
    size+=attrs.getSize(this,null,0,-1,-1);
  }
  size+=pool.length;
  ByteVector out=new ByteVector(size);
  out.putInt(0xCAFEBABE).putInt(version);
  out.putShort(index).putByteArray(pool.data,0,pool.length);
  out.putShort(access).putShort(name).putShort(superName);
  out.putShort(interfaceCount);
  for (int i=0; i < interfaceCount; ++i) {
    out.putShort(interfaces[i]);
  }
  out.putShort(nbFields);
  fb=firstField;
  while (fb != null) {
    fb.put(out);
    fb=fb.next;
  }
  out.putShort(nbMethods);
  mb=firstMethod;
  while (mb != null) {
    mb.put(out);
    mb=mb.next;
  }
  out.putShort(attributeCount);
  if (ClassReader.SIGNATURES && signature != 0) {
    out.putShort(newUTF8("Signature")).putInt(2).putShort(signature);
  }
  if (sourceFile != 0) {
    out.putShort(newUTF8("SourceFile")).putInt(2).putShort(sourceFile);
  }
  if (sourceDebug != null) {
    int len=sourceDebug.length - 2;
    out.putShort(newUTF8("SourceDebugExtension")).putInt(len);
    out.putByteArray(sourceDebug.data,2,len);
  }
  if (enclosingMethodOwner != 0) {
    out.putShort(newUTF8("EnclosingMethod")).putInt(4);
    out.putShort(enclosingMethodOwner).putShort(enclosingMethod);
  }
  if ((access & Opcodes.ACC_DEPRECATED) != 0) {
    out.putShort(newUTF8("Deprecated")).putInt(0);
  }
  if ((access & Opcodes.ACC_SYNTHETIC) != 0 && (version & 0xffff) < Opcodes.V1_5) {
    out.putShort(newUTF8("Synthetic")).putInt(0);
  }
  if (innerClasses != null) {
    out.putShort(newUTF8("InnerClasses"));
    out.putInt(innerClasses.length + 2).putShort(innerClassesCount);
    out.putByteArray(innerClasses.data,0,innerClasses.length);
  }
  if (ClassReader.ANNOTATIONS && anns != null) {
    out.putShort(newUTF8("RuntimeVisibleAnnotations"));
    anns.put(out);
  }
  if (ClassReader.ANNOTATIONS && ianns != null) {
    out.putShort(newUTF8("RuntimeInvisibleAnnotations"));
    ianns.put(out);
  }
  if (attrs != null) {
    attrs.put(this,null,0,-1,-1,out);
  }
  if (invalidFrames) {
    ClassWriter cw=new ClassWriter(COMPUTE_FRAMES);
    new ClassReader(out.data).accept(cw,ClassReader.SKIP_FRAMES);
    return cw.toByteArray();
  }
  return out.data;
}
