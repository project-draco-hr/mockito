{
  super(-1);
  this.type=type;
switch (type) {
case Opcodes.F_NEW:
case Opcodes.F_FULL:
    this.local=asList(nLocal,local);
  this.stack=asList(nStack,stack);
break;
case Opcodes.F_APPEND:
this.local=asList(nLocal,local);
break;
case Opcodes.F_CHOP:
this.local=asList(nLocal,local);
break;
case Opcodes.F_SAME:
break;
case Opcodes.F_SAME1:
this.stack=asList(1,stack);
break;
}
}
