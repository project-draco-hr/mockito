{
  if (!isSorted(keys))   throw new IllegalArgumentException("keys to switch must be sorted ascending");
  Label def=make_label();
  Label end=make_label();
  try {
    if (keys.length > 0) {
      int len=keys.length;
      int min=keys[0];
      int max=keys[len - 1];
      int range=max - min + 1;
      if (useTable) {
        Label[] labels=new Label[range];
        Arrays.fill(labels,def);
        for (int i=0; i < len; i++) {
          labels[keys[i] - min]=make_label();
        }
        mv.visitTableSwitchInsn(min,max,def,labels);
        for (int i=0; i < range; i++) {
          Label label=labels[i];
          if (label != def) {
            mark(label);
            callback.processCase(i + min,end);
          }
        }
      }
 else {
        Label[] labels=new Label[len];
        for (int i=0; i < len; i++) {
          labels[i]=make_label();
        }
        mv.visitLookupSwitchInsn(def,keys,labels);
        for (int i=0; i < len; i++) {
          mark(labels[i]);
          callback.processCase(keys[i],end);
        }
      }
    }
    mark(def);
    callback.processDefault();
    mark(end);
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  Error e) {
    throw e;
  }
catch (  Exception e) {
    throw new CodeGenerationException(e);
  }
}
